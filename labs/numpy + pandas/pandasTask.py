print('''
1. Какое количество мужчин и женщин ехало на корабле? В качестве ответа приведите два числа через пробел. 
2. Какой части пассажиров удалось выжить? Посчитайте долю выживших пассажиров. Ответ приведите в процентах (число в ин- тервале от 0 до 100, знак процента не нужен), округлив до двух знаков. 
3. Какую долю пассажиры первого класса составляли среди всех пассажиров? Ответ приведите в процентах (число в интервале от 0 до 100, знак процента не нужен), округлив до двух знаков. 
4. Какого возраста были пассажиры? Посчитайте среднее и медиану возраста пассажиров. В качестве ответа приведите два числа через пробел. 
5. Коррелируют ли число братьев/сестер с числом родителей детей? Посчитайте корреляцию Пирсона между признаками SibSp и Рarch. 
6. Какое самое популярное женское имя на корабле? Извлеките из полного имени пассажира (колонка Name) eго личное имя (First Name). Это задание ся специалист по анализу данных. Данные очень разнородные и шумные, но из них требуется извлечь необходимую информацию. Попробуйте вручную разобрать несколько значений столбца Name и выработать правило для извлечения имен, а также разделения типичный пример того, с чем сталкивает их на женские и мужские.
''')


# Файл test.csv (тестовые данные для проверки точности созданной модели)
# PassengerId - Уникальный идентификатор пассажира
# PclassКласс- пассажира (1-й, 2-й или 3-й)
# имя - имя пассажира
# Пол - пол пассажира
# Возраст - Возраст пассажира
# SibSp - Количество братьев и сестер / супругов на борту Титаника
# высушивать - Количество родителей / детей на борту Титаника
# Проездной билет -Номер билета
# Плата за проезд - Тариф оплачен за билет
# Кабина - Номер каюты
# путь начинал - Где пассажир попал на корабль (C - Шербур, S - Саутгемптон, Q = Куинстаун)


# Файл train.csv (содержит данные)
# PassengerId - Уникальный идентификатор пассажира
# Survived - Выжил (1) или умер (0)
# Pclass - Класс пассажира (1-й, 2-й или 3-й)
# Name - Имя пассажира
# Sex - Пол пассажира (мужской - male, женский - female)
# Age  - Возраст пассажира
# SibSp - Количество братьев и сестер / супругов на борту Титаника
# Parch - Количество родителей / детей на борту Титаника
# Ticket - Номер билета
# Fare- Тариф оплачен за билет (плата за проезда)
# Cabin - Номер каюты
# Embarked - Где пассажир попал на корабль (C - Шербур, S - Саутгемптон, Q = Куинстаун)  (C - Cherbourg, S - Southampton,  = Queenstown)

import pandas as pd
df = pd.read_csv('titanic.csv', sep=',')

# 1. Какое количество мужчин и женщин ехало на корабле? В качестве ответа приведите два числа через пробел. 
def Task1():
    count_female_and_male = df['Sex'].value_counts() # Выбор столбца. value_counts() - функцию, которая находит количество всех уникальных значений в столбце, вернёт объект Sries 
    return (count_female_and_male.loc['female'], count_female_and_male.loc['male']) # lok в Series это выбор "по метке"


# 2. Какой части пассажиров удалось выжить? Посчитайте долю выживших пассажиров. Ответ приведите в процентах (число в интервале от 0 до 100, знак процента не нужен), округлив до двух знаков. 
def Task2():
    survived = (df['Survived'].value_counts()).loc[1] # Выбор столбца return Series, value_counts() вернет Series, Обращаемся по метке (строки) 1
    return ("Процент выживших пассажиров: ", (survived/(df.shape[0]))*100)


# 3. Какую долю пассажиры первого класса составляли среди всех пассажиров? Ответ приведите в процентах (число в интервале от 0 до 100, знак процента не нужен), округлив до двух знаков. 
def Task3():
    count_pas = df.shape[0] # Количество пассажиров (равно числу строк)
    first_class_passengers =  (df['Pclass'].value_counts())
    temp = (round((first_class_passengers.loc[1] / count_pas),2))*100
    return ("Доля пассажиры первого класса составляли среди всех пассажиров:", temp)


# 4. Какого возраста были пассажиры? Посчитайте среднее и медиану возраста пассажиров. В качестве ответа приведите два числа через пробел. 
def Task4():
    mean_age =  df['Age'].mean()
    median_age = df['Age'].median() #то число которое будет ровно по середине массива, если его отсортировать
    return ("Среднее и медиану возраста пассажиров:", mean_age, median_age)


# 5. Коррелируют ли число братьев/сестер с числом родителей детей? Посчитайте корреляцию Пирсона между признаками SibSp и Рarch.
# Определить силу линейной зависимости между величинами (между двумя столбцами)
def Task5():
    return ("Корреляция:", df['SibSp'].corr(df['Parch'], method = 'pearson'))


# 6. Какое самое популярное женское имя на корабле? Извлеките из полного имени пассажира (колонка Name) eго личное имя (First Name).
# Это задание типичный пример того с чем сталкивается специалист по анализу данных. Данные очень разнородные и шумные, но из них требуется извлечь необходимую информацию. Попробуйте вручную разобрать несколько значений столбца Name и выработать правило для извлечения имен, а также разделения их на женские и мужские.
def Task6():
    tempDF = df[df['Sex'] == 'female']

    list = []
    # Операция: выбор строки по индексу. df.iloc[1] - Series
    for i in range(tempDF.shape[0]):
        list.append((tempDF.iloc[i]).loc['Name']) # достаём строку DF i, она явл Serial, в Serial достаём значение по метке "Name"

    ind = 0
    MrMrsList = ["Mrs.", "Miss.", "Ms.", "Mlle.", "Mme.", "Countess.", "Dr.", "Lady."] # последние 3: графиня, доктор, леди 
    listFirstName = []
    for l in range(len(list)):
        ind = 0
        listTmp = list[l].split(" ")
        for m in MrMrsList:
            if m in listTmp:
                ind = listTmp.index(m)
                break
        if(listTmp[ind]=="Miss." or listTmp[ind]=="Ms." or listTmp[ind]=="Mlle." or listTmp[ind]=="Dr." or listTmp[ind]=="Lady." ):#Dr. - доктор
            listFirstName.append(listTmp[ind +1])
        elif listTmp[ind]=="Mrs." or listTmp[ind]=="Mme." : # у замужних женщин может писаться перед их именем имя мужа, а может и не писаться
            for j in range(len(listTmp)):
                if(listTmp[j].startswith("(")):
                    listFirstName.append(listTmp[j].strip('\(,\)'))
                    break
            else: listFirstName.append(listTmp[ind +1]) # Выполняется если выход из цикла производится не инструкцией break
        elif listTmp[ind]=="Countess.": # Пишется как Countess. of 
            listFirstName.append(listTmp[ind+2].strip('\(,\)'))

    for str_ind in range(len(listFirstName)):
        listFirstName[str_ind] = listFirstName[str_ind].strip('\(,\)')

    sResult = pd.Series(listFirstName)
    return sResult.value_counts()

tasks = [Task1, Task2, Task3, Task4, Task5, Task6]
shift = 0
while not int(shift) in range(1, 6 + 1):
    shift = input("Выберите задание (1 ... 6) : ")
print(tasks[int(shift) - 1]())